-------------------------------------------------------

리액트 프로젝트는 1차적으로 빠르게 create-react-app을 이용해 생성

npm은 Node.js를 위한 패키지 매니저
보통의 패키지는 프로젝트내의 라이브러리의 형태를 띄지만,
스탠드얼론으로 실행가능한 패키지도 있다.

이런 패키지의 경우 보통 npm i -g 를 통해 설치해서 사용하지만,
버전 관리등이 어렵다.


npx는 이를 극복하기 위해 패키지의 가장 최신버전을 찾아서 npm i -g로
설치해주고 실행까지 해준다.

-------------------------------------------------------

아래의 명령어로 create-react-app을 실행
> npx create-react-app ${name} --template typescript 

생성된 프로젝트 접근시 package.json에 scripts를 통해
사용가능한 명령어 확인가능하다.

-------------------------------------------------------

웹팩은 모듈 번들러
=> 웹앱은 js, 이미지, css, html파일등으로 구성
=> 웹팩은 이런 필요한 파일을 모듈이라고 한다.
=> 웹팩은 이런 모듈을 결합하여 단순한 형태의 모듈로 변환해주며
   이 변환된 모듈을 번들이라고 한다.


아래의 명령어를 실행하면 웹팩이 프로젝트내의
모듈을 번들로 변환해준다.

> npm run build

build폴더가 생성되고 index.html이 있고 번들링된
결과물이 static에 위치해진다.

main.[hash].js
[hash1].[hash2].chunk.js
main.[hash].css

번들링 결과를 통해 정적서버를 기동하면 결과물을 서비스 가능하다.

> npm install -g serve
> serve -s build

-------------------------------------------------------

npm run start를 통해 개발모드로 실행하면 파일 변경시마다
변경이 즉각적으로 브라우져에 반영되어 생산성을 향상시켜준다.

핫 모듈 리로딩은 완벽하진 않아서 떄때로 이상한 결과가 나올 수 있고,
이런 경우 새로고침을 직접 실행해야 한다.

-------------------------------------------------------

npm install로 패키지를 설치가능하며 아래의 2가지 옵션을 지원한다.

> npm install --save
=> 실행에 필요한 패키지
=> package.json의 dependencies에 등록

> npm install --save-dev
=> 개발에 필요한 패키지
=> package.json의 devDependencies에 등록


패키지는 js로 개발된 것도 있고, ts로 개발된 것도 있다.
js로 개발된 패키지를 ts에서 사용하려면 @types/* 로 시작하는
타입 라이브러리를 추가로 설치해야 한다.

-------------------------------------------------------

목업 데이터 만들기

chance 패키지는 다양한 종류의 목업 데이터를 제공해준다.
js로 구현된 패키지로 ts에서 사용하려면 @types/chane

luxon 패키지는 날짜를 만들어주는 기능을 제공한다.

> npm install chance luxon
> npm i -d @types/chance @types/luxon

-------------------------------------------------------




