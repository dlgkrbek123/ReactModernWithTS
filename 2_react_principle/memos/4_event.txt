--------------------------------------------------------------------------------

모든 HTML 요소는 onmouseover처럼 on 으로 시작하는
이벤트 속성을 제공한다.

프로그램 상에서 일어난 특정한 사건을 이벤트라고 한다.

JS엔진은 이를 위해 타입을 제공하고 아래와 같은 속성을
제공한다.

1. type: 이벤트의 이름을 나타낸다.
2. isTrusted : 이벤트가 브라우져에서 발생한건지, 코드상에서 발생한건지 명시
3. target : 이벤트가 처음 발생한 HTML 요소
4. currentTarget : 이벤트를 처리하고 있는 핸들러와 연결된 현재대상
5. bubbles : 이벤트가 DOM을 타고 버블링될지를 나타냄 

--------------------------------------------------------------------------------

EventTarget은 아래의 메소드를 제공
  1. addEventlIstener
  2. removeEventlIstener
  3. dispatchEvent


아래와 같이 Event 객체를 코드로 생성가능하고,
DOM 객체에 전달가능하다.

new Event('click', { bubbles: true })
targetDOM.dispatchEvent(new Event('click', { bubbles: true }))

--------------------------------------------------------------------------------

물리DOM의 이벤트 핸들링 예제

/* EventlIstener 예제 */
1과 2에 이밴트 핸들러를 전달하여 이벤트 처리를 한다.

/*  OnClick 예제 */
=> 1의 사용법이 다소 번거로워서 대부분의 HTML요소는 
     on을 통한 이벤트 핸들러 바인딩을 제공한다.
=> onclick은 요소당 한개만 정의 가능
      재정의 하면 이전에 등록한 이벤트 핸들러는 무효화

window.onclick = (e : Event) => console.log('mouse click occurs.');

--------------------------------------------------------------------------------

리액트에서의 이벤트 처리
=> 리액트 컴포넌트도 on이벤트명으로 요소의 이벤트 속성을
     지원한다.
=> 차이점은 카멜케이스를 따른다는 것이다.

=> 이벤트 객체의 타입이 Event가 아니라 SyntheticEvent이다.
=> 물리 DOM에서 발생하는 이벤트를 네이티브 이벤트라고 한다.
=> 이를 래핑한 객체를 사용한다.

/* ReactOnClick  예제 */
/* DispatchEvent 예제 */

--------------------------------------------------------------------------------

이벤트 버블링
=> 자식요소에서 발생한 이벤트가 가까운 부모요소에서 
     root요소까지 계속 전달되는 현상
=> 이벤트가 직접 발생한 이벤트 핸들러에서는 currentTarget이
     null이지만 부모요소에서는 부모요소를 의미한다.
 
 /* EventBubbling 예제  */
버튼 클릭시 div에 버블링되어 이벤트 핸들러 호출됨


stopPropagation 메소드로 이벤트 버블링을 중지할 수 있다.
 /* StopPropagation 예제  */
 버튼을 클릭해도 div

 --------------------------------------------------------------------------------

input 요소의 이벤트 처리
=> input요소도 click 이벤트가 발생한다.
=> 변동이 있다면 change 이벤트가 발생한다.
  => e.target의 몇몇 속성이 확장되었다.
  => 텍스트의 경우 e.target.value로 값을 얻어올 수 있다.
  => checkbox나 radio의 경우에 checked
  => file이면 files로 내용을 얻을 수 있다.

/* VariousInput 예제  */
/* OnChange 예제 */

=> value와 checked이외에 defaultValue와 defaultChecked 
     속성을 제공하며 이를 통해 요소의 초기값을 설정한다.
=> File타입은 Blob과 이를 확장한 타입도 지원한다.
=> file 객체의 name, size, type등으로 파일에 대한 메타정보를
     확인가능하다.

---------------------------------------------------------------------------------

드래그앤 드롭 이벤트 처리
=> 모든 HTMLElement 요소는 draggable이라는 boolean
     속성을 제공한다.
=> DragEvent는 여러개의 이벤트로 분화되었다.
1. dragenter
2. dragstart
3. drag
4. dragover
5. dragleave
6. dragend
7. drop

<h1 draggable>Drag Me</h1>

=> DragEvent도 react에서 제공한다.
=> dataTransfer로 파일이 드롭된 것을 감지가능하다.
=> preventDefault를 적절히 사용해야 한다.
=> 브라우져에서 기본적으로 drop이벤트가 fire되지 않는다.
     이벤트를 발생시키려면 dragOver이벤트 핸들러에서
     preventDefault를 호출해야 한다.
=> onDrop에서도 preventDefault를 호출하는게 좋다.

/* DragDrop 예제 */
/* FIleDrop 예제  */

---------------------------------------------------------------------------------