---------------------------------------------------------------------------------

hooks
=> useXXX의 이름을 가진 함수
=> 함수형 컴포넌트에서만 사용가능

=> 초기에는 클래스형 컴포넌트만 있었다.
=> 코드가 직관적이지 않고, extends를 통해 모르는 기능들이 숨겨져 있음
=> 라이프사이클 메소드가 너무 많고, 기능 재사용이 어렵다.

아래와 같은 특징을 지닌다
  1. 같은 hooks를 여러번 호출할 수 있다.
  2. 컴포넌트 함수 몸통에서만 호출되어야 한다.
  3. 비동기 함수를 콜백함수로 사용할 수 없다.

---------------------------------------------------------------------------------

hooks는 scope에 대해 알아야 함
변수는 유효한 범위를 가진다.

block scope내의 변수를 지역변수라고 한다.
지역변수는 제어가 블록을 벗어나면 소멸된다.

state는 scope와 무관하게 계속 유지하는 값
immutable, mutable로 나뉜다.

함수컴포넌트는 함수라서 scope에 의해 상태를 가질 수 없다.
상태를 가지려면 함수밖에서 scope의 영향을 받지 않는 전역변수를 사용해야함
useState가 함수 컴포넌트가 상태를 가진것처럼 동작할 수 있게 한다.

캐시를 전역변수 형태로 만들어 구현가능하다. (값을 복사해 놓는 임시 저장소) => 데이터 접근시간, 값 계산 시간을 절약하기 위해서
/* UseOrCreateTest 실습 */

---------------------------------------------------------------------------------

useState
=> 가변 상태를 캐싱
=> 타입 선언은 아래와 같다.

function useState<S>(initialState : S | (() => S)): [S, Dispatch(SetStateAction<S>)]

---------------------------------------------------------------------------------

useMemo로 메모아이제이션을 통해 파생값 연산에 대한 최적화를 한다.
=> 과거에 계산한 값을 캐시해서 사용

useMemo의 타입정의는 아래와 같다.

function useMemo<T>(factory: () => T, deps: DependencyList | undefined ): T

---------------------------------------------------------------------------------

useCallback은 값이 아닌 함수를 캐싱한다.
타입 정의는 아래와 같다.

function useCallback<T extends (...args: any[]) => any>(callback: T, deps: 
DependencyList):T

---------------------------------------------------------------------------------

Custom hooks
=> hooks를 조합해 만든 새로운 hooks

---------------------------------------------------------------------------------