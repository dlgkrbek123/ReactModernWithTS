---------------------------------------------------------------------------------

RDBMS
=> SQL을 사용

몽고 DB
=> 자바스크립트를 질의하는데 사용
=> JSON 포맷으로 바꿀수 있는 모든 객체를 저장가능

---------------------------------------------------------------------------------

> brew install mongodb/brew/mongodb-community
> brew services start mongodb/brew/mongodb-community
> brew services stop mongodb/brew/mongodb-community

---------------------------------------------------------------------------------

DB 확인
  > mongosh
  > show dbs

DB 선택하기
  > use {DB_NAME}

현재 사용중인 DB명 확인
  > db

---------------------------------------------------------------------------------

DB 생성
=> 직접적인 생성 명령어는 없으며 사용하려고 할때 없으면 만들어준다.
=> 실제 데이터가 새로운 DB에 생성될 때 실제로 생성된다.

> use {NEW_DB_NAME}
> db.user.insertOne({ name: 'Jack' })  // 이떄 DB 생성


DB 삭제
  > db.dropDatabase()

---------------------------------------------------------------------------------

RDBMS는 테이블의 Row / Record에 데이터를 저장한다.
테이블이란 정의된 스키마에 맞춰 작성된 저장소

몽고DB에서는 테이블과 유사한 것을 collection이라고 부른다.
하지만 테이블과 다르게 스키마가 없다
레코드는 몽고 DB의 document에 대응된다.


컬렉션 생성
> use mydb
> db.createCollection("user", {})

컬렉션 리스팅 / 삭제
> db.getCollectionNames()
> db.user.drop()

---------------------------------------------------------------------------------

연산자 : $gt같이 달러 기호를 접두사로 사용하는 키워드
  비교연산자
    $eq
    $ne
    $gt
    $gte
    $lt
    $lte

  배열 연산자
    $in
    $nin

  논리 연산자
    $and
    $not
    $or
    $nor

  정규식 연산자
    $regex

  업데이트 연산자
    $set : 변경
    $inc : 숫자 증가
    $dec : 숫자감소

---------------------------------------------------------------------------------

모든 document는 _id라는 필드를 가지며 이는 자동생성되는 고유식별자다.
_id는 ObjectId("abcd123123123123") 같은 방식으로 노출된다.
컬렉션에서 문서에 대한 CRUD는 아래와 같은 메서드로 수행


Create
  db.user.insertOne(object)
  db.user.insertMany(array)


Read
  db.user.findOne(queryObj)
  db.user.find(queryObj)

> db.user.findOne({}) // 무조건
> db.user.find({ name: 'Jack' }) // 이름이 Jack인
> db.user.find({ age: { $gt: 20 } }) // age값이 20보다 큰
> db.user.find({ name: { $eq: 'Jack' }, age: { $gt: 10 }}) // 나이가 10보다큰 Jack
> db.user.find({ age: { $in: [11, 22] } }) // 나이가 11이거나 22인
> db.user.find({ $and: [{ name: { $in: ['Jack', 'Tom'] } }, {age: {$lt: 20}}] }) // 나이가 20보다 작고 이름이 jack, tom인
> db.user.find({ name: { $regex: /^J.*$/ } }) // 이름이 J로 시작하는


Update
  db.user.updateOne(conditionObj, updateObj, options)
  db.user.updateMany(conditionObj, updateObj, options)
  db.user.findOneAndUpdate(conditionObj, updateObj, options) 
  => updateOne과 같으나 반환값은 수정전의 값
  => 수정후의 값을 리턴받으려면 returnNewDocument 옵션을 사용

  // J로 이름이 시작하는 문서의 name: 'John', 나이를 10살 증가
  > db.user.updateOne(
      { name: { $regex: /^J.*$/ } },
      { $set: { name: 'John' }, $inc: {age: 10 }  }
    )
  > db.user.updateMany(
      { name: { $regex: /^J.*$/ } },
      { $inc: {age: 10 }  }
    )
  > db.user.findOneAndUpdate(
      { name: 'Jane' },
      { $set: { age: 55 } },
      { returnNewDocument: true }
    )

Delete
  db.user.deleteOne(queryObj, options)
  db.user.deleteMany(queryObj, options)

---------------------------------------------------------------------------------