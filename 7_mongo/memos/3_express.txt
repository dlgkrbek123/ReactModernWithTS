---------------------------------------------------------------------------------

> npm i mongodb
> npm i -D typescript ts-node @types/node @types/mongodb

---------------------------------------------------------------------------------

TCP/IP 프로토콜은 데이터 전송을 제어
클라이언트와 서버로 구성된다.
서버는 항상 요청에 대비해 listening
TCP/IP 연결이 되면 소켓을 얻는다. 이를 통해 데이터를 주고 받음
HTTP는 이 위에서 동작

---------------------------------------------------------------------------------

nodejs에서 내장된 http 패키지가 웹서버 객체 생성 가능

import { createServer } from 'http';

---------------------------------------------------------------------------------

웹서버는 본디 HTML을 응답해주는 목적으로 설계되었으나, 점차 JSON 데이터를 응답해주는 방식으로 진화
웹 서버 => API 서버

REST
=> 메소드로 자원에 대한 CRUD 작업을 분류하고, url로 자원을 명시
=> 일관적인 방식으로 API를 설계 가능

---------------------------------------------------------------------------------

express는 nodejs에서 표준 웹 프레임워크

> npm i express cors
> npm i -D @types/express @types/cors nodemon

app객체를 통해 서버를 구축
app.use 메서드로 미들웨어를 등록
미들웨어는 아래와 같이 구현됨

const middleware = (req, res, next) => {}


express.static 미들웨어로 정적파일에 대한 접근을 지원한다.
=> app.use(express.static('public'))

---------------------------------------------------------------------------------

cors
=> POST요청시 preflight요청과 응답 통신기능을 추가해서
   악의적인 목적의 데이터를 POST나 PUT 메서드로 서버쪽에 보내지 못하게 하는 기술
=> 브라우져에서 POST 요청을 하면 서버가 먼저 preflight 응답을 해줘야 한다.
=> cors 미들웨어로 preflight 응답을 한다.

---------------------------------------------------------------------------------

Router라는 함수를 제공
router객체는 listen을 제외하면 app과 동일
app.use에 넘겨 라우트에 대한 설정을 깔끔하게 처리

const router = Router()
app.use(path, router)

---------------------------------------------------------------------------------

auth는 사용자를 구분하는 목적
OAuth jwt 기반

jwt는 선택적 서명과 선택적 암호화 기술을 사용
=> 서버에 요청시 헤더의 Authorization에 Bearer ${value}의 형태로 전송
=> 서버는 이를 활용해 유저를 구분
=> 클라에서 헤더에 담아 보냄
=> 유효기간 설정 가능

토큰은 문자열/숫자로 구성

---------------------------------------------------------------------------------